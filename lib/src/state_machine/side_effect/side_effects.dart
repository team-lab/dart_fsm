part of '../state_machine.dart';

/// The abstract class of side effects generated by the transition of
/// [StateMachine]
/// [SideEffect] is one of [AfterSideEffect] executed after the transition,
/// [BeforeSideEffect] executed before the transition, or
/// [FinallySideEffect] executed regardless of whether a transition is made
/// after an Action is dispatched.
abstract interface class SideEffect {
  const SideEffect();
}

/// [SideEffect] executed after the [ACTION] is dispatched and the [STATE] is
/// changed. This [SideEffect] is executed only when the transition is made.
abstract interface class AfterSideEffect<STATE extends StateMachineState,
    ACTION extends StateMachineAction> extends SideEffect {
  const AfterSideEffect();

  /// The method executed after the instance of [AfterSideEffect] is generated
  /// by [AfterSideEffectCreator].
  /// The current [StateMachine] and the [Transition] when this [SideEffect] was
  /// generated are passed as arguments.
  Future<void> execute(
    StateMachine<STATE, ACTION> stateMachine,
    Valid<STATE, ACTION> validTransition,
  );
}

/// [SideEffect] executed after the [ACTION] is dispatched, executed before the
/// [STATE] is changed, and executed regardless of whether the transition is
/// made.
abstract interface class BeforeSideEffect<STATE extends StateMachineState,
    ACTION extends StateMachineAction> extends SideEffect {
  const BeforeSideEffect();

  /// The method executed after the instance of [BeforeSideEffect] is generated
  /// by [BeforeSideEffectCreator].
  /// The current [STATE] and the [ACTION] when this [SideEffect] was generated
  /// are passed as arguments.
  Future<void> execute(
    STATE currentState,
    ACTION action,
  );
}

/// [SideEffect] executed after the [ACTION] is dispatched, executed after the
/// all other processes are finished, and executed regardless of whether the
/// transition is made.
abstract interface class FinallySideEffect<STATE extends StateMachineState,
    ACTION extends StateMachineAction> extends SideEffect {
  const FinallySideEffect();

  /// The method executed after the instance of [FinallySideEffect] is generated
  /// by [FinallySideEffectCreator].
  /// The current [STATE] and the [ACTION] when this [SideEffect] was generated
  /// are passed as arguments.
  Future<void> execute(
    StateMachine<STATE, ACTION> stateMachine,
    Transition<STATE, ACTION> transition,
  );
}
